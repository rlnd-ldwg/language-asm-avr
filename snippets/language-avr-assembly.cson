".source.avrasm":
  "Code Segment":
    prefix: "text"
    body: '''
      .text
      	$0
    '''
  "Data Segment":
    prefix: "data"
    body: '''
      .data
      	$0
    '''
  "Add with Carry":
    prefix: "adc"
    body: '''
      adc ${1:Rd},${2:Rr}
      $0
    '''
  "Add without Carry":
    prefix: "add"
    body: '''
      add ${1:Rd},${2:Rr}
      $0
    '''
  "Add Immediate to Word":
    prefix: "adiw"
    body: '''
      adiw ${1:Rd+1}:${2:Rd},${3:K}
      $0
    '''
  "Logical AND":
    prefix: "and"
    body: '''
      and ${1:Rd},${2:Rr}
      $0
    '''
  "Logical AND with Immediate":
    prefix: "andi"
    body: '''
      andi ${1:Rd},${2:K}
      $0
    '''
  "Arithmetic Shift Right":
    prefix: "asr"
    body: '''
      asr ${1:Rd}
      $0
    '''
  "Bit Clear in SREG":
    prefix: "bclr"
    body: '''
      bclr ${1:s}
      $0
    '''
  "Bit Load from the T Flag in SREG to a Bit in Register":
    prefix: "bld"
    body: '''
      bld ${1:Rd},${2:b}
      $0
    '''
  "Branch if Bit in SREG is Cleared":
    prefix: "brbc"
    body: '''
      brbc ${1:s},${2:label}
      $0
    '''
  "Branch if Bit in SREG is Set":
    prefix: "brbs"
    body: '''
      brbs ${1:s},${2:label}
      $0
    '''
  "Branch if Carry Cleared":
    prefix: "brcc"
    body: '''
      brcc ${1:label}
      $0
    '''
  "Branch if Carry Set":
    prefix: "brcs"
    body: '''
      brcs ${1:label}
      $0
    '''
  "Break":
    prefix: "break"
    body: '''
      break
      $0
    '''
  "Branch if Equal":
    prefix: "breq"
    body: '''
      breq ${1:label}
      $0
    '''
  "Branch if Greater or Equal (Signed)":
    prefix: "brge"
    body: '''
      brge ${1:label}
      $0
    '''
  "Branch if Half Carry Flag is Cleared":
    prefix: "brhc"
    body: '''
      brhc ${1:label}
      $0
    '''
  "Branch if Half Carry Flag is Set":
    prefix: "brhs"
    body: '''
      brhs ${1:label}
      $0
    '''
  "Branch if Global Interrupt is Disabled":
    prefix: "brid"
    body: '''
      brid ${1:label}
      $0
    '''
  "Branch if Global Interrupt is Enabled":
    prefix: "brie"
    body: '''
      brie ${1:label}
      $0
    '''
  "Branch if Lower (Unsigned)":
    prefix: "brlo"
    body: '''
      brlo ${1:label}
      $0
    '''
  "Branch if Less Than (Signed)":
    prefix: "brlt"
    body: '''
      brlt ${1:label}
      $0
    '''
  "Branch if Minus":
    prefix: "brmi"
    body: '''
      brmi ${1:label}
      $0
    '''
  "Branch if Not Equal":
    prefix: "brne"
    body: '''
      brne ${1:label}
      $0
    '''
  "Branch if Plus":
    prefix: "brpl"
    body: '''
      brpl ${1:label}
      $0
    '''
  "Branch if Same or Higher (Unsigned)":
    prefix: "brsh"
    body: '''
      brsh ${1:label}
      $0
    '''
  "Branch if the T Flag is Cleared":
    prefix: "brtc"
    body: '''
      brtc ${1:label}
      $0
    '''
  "Branch if the T Flag is Set":
    prefix: "brts"
    body: '''
      brts ${1:label}
      $0
    '''
  "Branch if Overflow Cleared":
    prefix: "brvc"
    body: '''
      brvc ${1:label}
      $0
    '''
  "Branch if Overflow Set":
    prefix: "brvs"
    body: '''
      brvs ${1:label}
      $0
    '''
  "Bit Set in SREG":
    prefix: "bset"
    body: '''
      bset ${1:s}
      $0
    '''
  "Bit Store from Bit in Register to T FLag in SREG":
    prefix: "bst"
    body: '''
      bst ${1:Rd},${2:b}
      $0
    '''
  "Long Call to a Subroutine":
    prefix: "call"
    body: '''
      call ${1:label}
      $0
    '''
  "Clear Bit in I/O Register":
    prefix: "cbi"
    body: '''
      cbi ${1:A},${2:b}
      $0
    '''
  "Clear Bits in Register":
    prefix: "cbr"
    body: '''
      cbr ${1:Rd},${2:K}
      $0
    '''
  "Clear Carry Flag":
    prefix: "clc"
    body: '''
      clc
      $0
    '''
  "Constant Expression":
    prefix: "equ"
    body: '''
      .equ ${1:label}, ${2:expression}
      $0
    '''
  "Constant Expression":
    prefix: "set"
    body: '''
      .set ${1:label}, ${2:expression}
      $0
    '''  
  "Define word(s)":
    prefix: "word"
    body: '''
      .word	${1:expression}
      $0
    '''
  "Define byte(s)":
    prefix: "byte"
    body: '''
      .byte ${1:expression}
      $0
    '''
  "Define string(s)":
    prefix: "ascii"
    body: '''
      .ascii "${1:expression}"
      $0
    '''
  "Define zero terminated string(s)":
    prefix: "asciz"
    body: '''
      .asciz "${1:expression}"
      $0
    '''
  Exit:
    prefix: "exit"
    body: '''
      .exit
      $0
    '''
  Include:
    prefix: "include"
    body: '''
      .include "$1"
      $0
    '''
  "Init Stackpointer":
    prefix: "stack"
    body: '''
      ; Init Stackpointer
      ldi	${1:temp}, LOW(RAMEND)
      out	SPL, $1
      ldi	$1, HIGH(RAMEND)
      out	SPH, $1
      $0
    '''
  "Jump":
    prefix: "jmp"
    body: '''
      jmp ${1:label}
      $0
    '''
  "List Macro":
    prefix: "listmac"
    body: '''
      .listmac
      $0
    '''
  List:
    prefix: "list"
    body: '''
      .list
      $0
    '''
  Macro:
    prefix: "macro"
    body: '''
      .macro	${1:name}
      	$2
      .endm
      $0
    '''
  Function:
    prefix: "func"
    body: '''
      .func	${1:name}
      	$2
      .endfunc
      $0
    '''
  "No List":
    prefix: "nolist"
    body: '''
      .nolist
      $0
    '''
  "Program Origin":
    prefix: "org"
    body: '''
      .org ${1:expression}
      $0
    '''
  "Register Symbol":
    prefix: "def"
    body: '''
      .def ${1:symbol}
      $0
    '''
  "Reserve space":
    prefix: "space"
    body: '''
      .space ${1:size}, ${2:fill}
      $0
    '''

